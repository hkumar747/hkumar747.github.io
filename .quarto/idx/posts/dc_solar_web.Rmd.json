{"title":"Rooftop solar adoption in Washington DC","markdown":{"yaml":{"title":"Rooftop solar adoption in Washington DC","author":"Kumar H","date":"2024-03-02","output":{"html_document":{"code-fold":true}}},"headingText":"install packages","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(warning = FALSE, message = FALSE)\n\nlibrary(arrow)\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(sf)\nlibrary(sandwich)\nlibrary(viridis)  # for improved color scales\nlibrary(car)\nlibrary(lmtest)\nlibrary(stargazer)\nlibrary(broom)\nlibrary(lme4)\nlibrary(Matrix)\nlibrary(lmtest)\nlibrary(recipes)   # For preprocessing steps\nlibrary(modeldata) # For data splitting\nlibrary(caret)\nlibrary(googledrive)\nlibrary(kableExtra)\n\n\n```\n\n\nAs of 2022, solar energy provided about 3.4% of total U.S. utility-scale electricity (U.S. Energy Information Administration, 2024)\nAmong US cities, Honolulu tops the chart, with per capita solar photovoltaic (PV) capacity installed at 1133 Watts DC/person in 2022. \nWashington DC was at 10th rank by 2022 (leaping up from 17th in 2018.) [(Frontier Group, 2022)](https://frontiergroup.org/resources/shining-cities-2022/)\n\nThe most likely reason behind this boost was DC's **Renewable Portfolio Standards (RPS)** policies.\nRPS policies are regulatory mandates to increase the production of energy from renewable sources, requiring electric utilities to \nensure that a specified percentage of the energy they generate or sell comes from renewable sources by a certain date.\nDespite the lack of a comprehensive federal RPS, state-level mandates have collectively contributed to a significant increase \nin the country's renewable energy capacity, transforming the energy landscape and paving the way for a more sustainable future.\n\nDC's RPS is one of the country's most ambitious, as underscored by the **Clean Energy DC Omnibus Amendment Act of 2018.**\nThis act mandates that 100 percent of the Districtâ€™s electric supply be sourced from renewable generators by 2032. Additionally, \nit sets forth a solar \"carve-out\" requirement that 5.5 percent of the 2032 electric supply must come from in-District solar, with this percentage increasing\nto 10 percent by 2041. This places the District as the third jurisdiction in the U.S., following Hawai'i and California, to\nestablish a 100 percent renewable energy requirement.\n\nThe primary mechanism by which the DC Department of Energy and Environment (DOEE) influences the solar market is through **Solar Renewable Energy Credits (SRECs)**\nand **Alternative Compliance Payments (ACP).** \n\n\n::: {.callout-tip}\n### SRECs and ACP\n- **SREC:** Market-based instruments that represent the environmental benefits of generating solar power. \nEach SREC certifies that one megawatt-hour of solar electricity has been generated and can be sold or traded, providing an additional revenue stream for solar energy producers on top of the electricity they sell.\n\n- **ACP:** Penalties that electric utilities or other entities must pay if they fail to meet their renewable energy targets, specifically the portion of those targets that must be met through solar energy. \n:::\n\nThere have been several major policy changes in DC that affect solar adoption incentives, as summarized in this RPS report\n by the DC Public Service Commission (https://dcpsc.org/Orders-and-Regulations/PSC-Reports-to-the-DC-Council/Renewable-Energy-Portfolio-Standard.aspx)\n\n\n-\t**Distributed Generation Amendment Act, 2011**\n    -\tAmended RPS to increase solar requirements through 2023 to 2.5%.\n    - Restricted eligible solar energy resources to those within the District or connected to a feeder serving the District.\n\n- **Renewable Portfolio Standard Expansion Amendment Act, 2016**\n    - Increased RPS requirement to 50% by 2032, with solar energy requirement rising to 5%.\n    - Modified solar energy RPS compliance fees, setting new rates from 2016 through 2032.\n\n- **CleanEnergy DC Omnibus Amendment Act, 2018**\n    - Raised RPS to 100% by 2032, with solar energy requirement increasing to 5.5% by 2032 and 10% by 2041.\n    - Extended solar REC banking period from three to five years.\n\n- **Local Solar Expansion Amendment Act, 2022**\n\n    - Increased solar RPS requirement to 15% by 2041.\n    - Directed funds from alternative compliance payments to support low-income ratepayer relief and solar policy studies.\n    - Adjusted solar energy RPS compliance fees, gradually reducing them from 2024 through 2033, setting a fee of $0.30 per kWh from 2033 through 2041, and $0.10 thereafter.\n\n```{r, include=FALSE}\n\n# inset chatCompletion\n# Create the data frame\nyear <- 2011:2041\ntier_one_renewable_percent <- c(4, 5, 6.5, 8, 9.5, 11.5, 13.5, 15.5, 17.5, 20, 26.25, 32.5, 38.75, 45.0, 52.0, 59.0, 66.0, 73.0, 80.0, 87.0, 94.0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100)\nsolar_energy <- c(0.4, 0.5, 0.5, 0.6, 0.7, 0.825, 0.98, 1.15, 1.85, 2.175, 2.5, 2.6, 3.0, 3.65, 4.3, 5.0, 5.65, 6.3, 7.0, 7.65, 8.3, 9.0, 9.65, 10.3, 11.0, 11.65, 12.3, 13.0, 13.65, 14.3, 15.0)\n\ndata <- data.frame(year, tier_one_renewable_percent, solar_energy)\n\ndata$gap <- data$tier_one_renewable_percent-data$solar_energy\n\n# Assuming 'data' is your dataframe\n# Add a new column for the act labels\ndata$Act <- NA  # Initialize with NA\ndata$Act[data$year == 2011] <- \"Distributed Generation Amendment Act of 2011\"\ndata$Act[data$year == 2016] <- \"Renewable Portfolio Standard Expansion Amendment Act\"\ndata$Act[data$year == 2022] <- \"Clean Energy DC Omnibus Amendment Act\"\n\n# Now, plotting with enhancements and adding specific labels\np <- ggplot(data, aes(x = year)) +\n  geom_line(aes(y = tier_one_renewable_percent, color = \"Tier-One Renewable Percent\"), size = 1) +\n  geom_area(aes(y = tier_one_renewable_percent), fill = \"skyblue\", alpha = 0.5) +\n  geom_line(aes(y = solar_energy, color = \"Solar Energy\"), size = 1) +\n  geom_area(aes(y = solar_energy), fill = \"yellow\", alpha = 0.5) +\n  geom_point(aes(y = tier_one_renewable_percent), color = \"#0099f9\", size = 2) +\n  geom_label(data = data %>% filter(!is.na(Act)), aes(y = tier_one_renewable_percent, label = Act), nudge_x = 0.25, nudge_y = 0.25, check_overlap = TRUE, size = 3, label.size = 0) +\n  scale_color_manual(values = c(\"Tier-One Renewable Percent\" = \"#1f77b4\", \"Solar Energy\" = \"yellow\")) +\n  labs(x = \"Year\", y = \"Percent / Energy\", title = \"Tier-One Renewable Percent and Solar Energy Over Time\", color = \"Metrics\") +\n   xlim(2010, 2032) +\n  theme_minimal() +\n  theme(legend.position = \"top\",\n        legend.title = element_text(size = 12),\n        legend.text = element_text(size = 10),\n        plot.title = element_text(size = 16, face = \"bold\"),\n        axis.title = element_text(size = 14),\n        plot.margin = margin(10, 10, 10, 10))\n\n# Print the plot\nprint(p)\n\n\n```\n\n\n### Installed solar capacity has skyrocketed in DC. \n\nExisting empirical evidence finds that US states that closed off their SREC markets to out-of-state facilites witnessed higher\nsolar installation, as DC did in 2011. [(Cohen et al 2022)](https://doi.org/10.1111/ajae.12248)\n\nHowever, as the following animated graph shows, adoption *really* took off around 2016.\n\n```{r, echo=TRUE, eval=FALSE}\n#| code-fold: true\n#| code-summary: \"Sample `gganimate` code\"\n\n# Animate the plot\nanim <- p + transition_reveal(date) + \n  enter_grow() +  # Animation for entering points\n  exit_fade() +   # Animation for exiting points\n  ease_aes('cubic-in-out') + # Animation speed\n  labs(title = 'Year: {frame_along}', subtitle = \"Tier-One Renewable Percent\") # Update title with year\n\n# Render the animation\nanimate(anim, duration = 10, fps = 30, width = 800, height = 600, renderer =gifski_renderer())\n\n```\n\n```{r, echo=FALSE}\n\n# Fetch data for DC\n# Convert sf object to GeoJSON\n# st_write(joined_df, \"solar_acs2019_bg.geojson\", driver = \"GeoJSON\")\n\nlibrary(gganimate)\n\ndf_time <- read_csv('data/tot_solar_time.csv')\n\n#create the plot\np <- ggplot(df_time, aes(x = date, y = cum_mw)) +\n  geom_line(aes(group = 1), color = \"#1f77b4\", size = 1.2) +  # Increase line thickness with `size`\n  geom_point( color = \"#0099f9\") + # Draw points\n  labs(x = \"Year\", y = \"Capacity added (MW)\", title = \"Solar Boom in DC\") +\n   ggthemes::theme_solarized() +\n   theme(\n    text = element_text(color = \"black\"), # Make all text black\n    plot.title = element_text(size = 26, face = \"bold\", color = \"black\"), # Enlarge and bolden the title\n    axis.title = element_text(size = 20, face = \"bold\", color = \"black\"), # Bolden axis titles\n    axis.text = element_text(size = 18) # Adjust size of axis text if needed\n  ) \n  # theme(legend.position = \"none\") # Hide the legend\n# Creating the plot with ggplot2\n\n# Animate the plot\nanim <- p + transition_reveal(date) + \n  enter_grow() +  # Animation for entering points\n  exit_fade() +   # Animation for exiting points\n  ease_aes('cubic-in-out') + # Animation speed\n  labs(title = 'Year: {frame_along}', subtitle = \"Tier-One Renewable Percent\") # Update title with year\n\n# Render the animation\nanimate(anim, duration = 10, fps = 30, width = 600, height = 400, renderer =gifski_renderer())\n\n# Save the animation\n# anim_save(\"dc_solar_anim.gif\", animation = anim)\n\n\n# ts_data_ts <- ts(df_time %>% select(date, cum_mw))\n# \n# library(strucchange)\n# bp <- breakpoints(ts_data_ts ~ 1)\n# \n# plot(bp)\n# # Assuming ts_data is your time series data\n# cpt.mean <- cpt.mean(ts_data, method=\"PELT\")\n# \n#   # Plot the changes\n# plot(cpt.mean)\n# # Display the plot\n# # ggsave(\"renewable_energy_plot.png\", width = 14, height = 7, dpi = 100)\n\n```\n\n\nMeasuring *actual generation*, as opposed to capacity installed, is trickier.\nIn 2022, the total retail electricity sales reported by suppliers in the District were 10.16 million MWh. \nTo put this in perspective, Hawaii's consumption in 2022 was around 9 million MWh, despite \nbeing 60 times larger in area and with 2x the population! ([EIA 2022](https://www.eia.gov/electricity/state/))\n\n\"The total number of SRECs retired for compliance was 263,919, which is equivalent to nearly 264,000 MWh and \nrepresents about 2.6% of the total retail electricity sales for the year\"â€‹â€‹. [(DC Public Service Commission, 2023)](https://dcpsc.org/Utility-Information/Electric/RPS/Renewable-Energy-Portfolio-Standard-Program/Monthly-Update-of-Solar-Generator-Certification.aspx_)\nOf course, SRECs can be held before they are cashed - it indicates that by this date, there has been *at least* 264,000 MWh generation of solar. \n\n\n## The DC Solar Market - Incentives and Costs\n\nIn Washington DC, the average solar panel costs [$11,000-$14,000](https://www.solarreviews.com/solar-panels/district-of-columbia) after federal incentives\n\nA household in DC can factor in three types of incentives available for a solar installation :\n\n- Federal rebates\n\n- SREC prices\n\n- Net metering\n\nThere is another type of indirect incentive, which might function as a 'stick' to the above 'carrots'. \nThis is the [**Building Energy Benchmarking Policy (BEPS)**](https://doee.dc.gov/service/building-energy-performance-standards-beps), which aims to identify and impose financial penalties on large buildings (>10,000 sq feet) with greater than average energy consumption\n\nThe following figures describe the outlook for solar generation in the District:\n\n- Technical potential = 1200 MW\n- Target by 2040 = 665 MW\n- Adoption in 2023 = 201 MW\n\nThe above figures are from a report by [Synapse Energy Economics](https://www.synapse-energy.com/sites/default/files/OPCs-Study-on-Future-of-Solar-PV-in-the-District-of-Columbia-18-077.pdf), where it also lays out the factors holding back adoption in DC.\nFor now, we zoom in on one particular factor laid out in the report:\n\n\"Given that **60 percent of households in the District are renter-occupied**, home ownership and upfront costs are likely strong barriers to solar adoption\"\n\n\n## Creating a building-level dataset to examine solar adoption\n\nWith the help of DC Open Dataâ€™s frequently updated and granular data on buildings, we can merge data solar and building attributes data\nfor almost all of DCâ€™s >100,000 residential buildings. \n\n - [DC PSC Monthly Update of Solar generator certification](https://dcpsc.org/Utility-Information/Electric/RPS/Renewable-Energy-Portfolio-Standard-Program/Monthly-Update-of-Solar-Generator-Certification.aspx_)\n   Geocoded dataset of all approved solar panels in Washington DC.\n\n - [Computer Assisted Mass Appraisal (CAMA)](https://opendata.dc.gov/datasets/c5fb3fbe4c694a59a6eef7bf5f8bc49a)\n   \n   Building attributes, sourced from tax records properties in Washington, D.C. Contains data on building attributes. \n\n::: {.callout-important}\n## Note: Merging properties with SSL\nLinking these two datasets is more complex than a single merge. Solar records are given for an address, but CAMA records are linked to Square Suffix Lot (SSL) numbers, \nwhich identifies the plot of land on which a building is located. Some lots have multiple buildings, and some buildings/complexes \nspan multiple lots.\n:::\n\nThe following table shows a small sample of the rows and columns in our resulting dataset.\n\n```{r, echo=FALSE}\n\n\n## AUTHENTICATE Google DRIVE account\n# drive_auth()\n# \n# \n# # download this to local drive\n#                path = \"output_data/residential_cross_sec.parquet\", overwrite = TRUE)\n\ndf <- read_parquet('data/cross_sec_api_12k.parquet')\ndf$cap_kw <- df$`Capacity (MW)`*1000\n\ndf$lat <- df$LATITUDE\ndf$lon <- df$LONGITUDE\ndf <- df %>%\n  filter(!is.na(lat) & !is.na(lon) \n         & lat != \"NA\" & lon != \"NA\") %>%\n  st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326) %>%\n   mutate(cap_kw = replace_na(cap_kw, 0))\n\n\n# add census block group data\n###############\n\nquantile_99 <- quantile(df$cap_kw, 0.99, na.rm = TRUE)\n\n\n# Preparing subsets\ndf_with_0 <- df %>% \n  filter(cap_kw == 0) %>%\n  select(SSL, STYLE_D, ROOF_D, NBHDNAME, cap_kw, max_sun_hours, min_dc_kwh) %>%\n  sample_n(2)\n\ndf_without_0 <- df %>%\n  filter(`Capacity (MW)` > 0 & `Capacity (MW)` <= quantile_99) %>%\n  select(SSL, STYLE_D, ROOF_D, NBHDNAME, cap_kw, max_sun_hours, min_dc_kwh)%>%\n  sample_n(3)\n\n# Combining the subsets\ndf_sample <- bind_rows(df_with_0, df_without_0)\n\n# drop geom\ndf_sample <- st_set_geometry(df_sample, NULL)\n\n#save\ndf_sample <- df_sample %>% select(SSL, STYLE_D, ROOF_D, NBHDNAME, cap_kw, max_sun_hours, min_dc_kwh)\n\n# write_csv(df_sample, 'kable_tab.csv')\n# \n# # Apply cell_spec to cap_mw for dynamic coloring\ndf_sample$cap_kw <- cell_spec(df_sample$cap_kw, \"html\",\n                              color = \"white\",\n                              bold = TRUE,\n                              background = spec_color(df_sample$cap_kw, end = 0.9, option = \"A\"))\n\n# Generating the table\nknitr::kable(df_sample, \"html\", escape = FALSE) %>%\n  kable_styling(full_width = F, fixed_thead=TRUE,\n                bootstrap_options = c(\"striped\", \"hover\"))\n\n\n```\n\n\n\nTwo variables have been called from the [Google Solar API](https://developers.google.com/maps/documentation/solar/reference/rest/v1/buildingInsights/findClosest) for these building locations:\n\n- `max_sun_hours`: Maximum number of sunshine hours received per year, by any point on the roof\n\n- `min_dc_kwh`: How much sunlight energy the roof captures in (direct current) DC kWh, assuming a certain minimum number of panels. (This is a transformed variable)\n\nThe above example illustrates the fundamental prediction problem facing us - will these buildings adopt?\n\nThey seem to be as suitable as the buildings in the bottom 3 rows, receiving high amounts of annual sunlight (from the supply side).\n\n\n\nThe fact that the solar data has both the exact location and date of solar panel installation, added with DC Open Data's rich repository\nof spatial building-level datasets implies that we can drill down at the hyperlocal level for insights in solar adoption patterns.\n\n\n```{r, echo=FALSE}\nlibrary(leaflet)\nlibrary(RColorBrewer)\n\nward_data <- readRDS(\"data/ward_solar.rds\")\nzip_data <- readRDS(\"data/zipcode_solar.rds\")\nsolar_build <- readRDS(\"data/solar_build.rds\")\n\n# Check the spatial level and generate the map accordingly\npal <- colorNumeric(palette = \"YlOrRd\", domain = data$total_capacity_mw)\n  \n# map <- leaflet(zip_data) %>%\n#     addProviderTiles(providers$CartoDB.Positron) %>%\n#     addPolygons(\n#       layerId = ~NAME,\n#       fillColor = ~pal(total_capacity_mw),\n#       color = \"#444444\",\n#       weight = 1,\n#       smoothFactor = 0.5,\n#       popup = ~paste(\"Zip/Ward:\", NAME,\n#                      \"<br>Total Capacity MW:\", total_capacity_mw,\n#                      \"<br>Percentage Solar:\", perc_solar),\n#       highlightOptions = highlightOptions(weight = 2, \n#                                           color = \"white\",\n#                                           bringToFront = TRUE))\n\n# print(map)\n\n########################################################3\n## building\n\nspatialLevel <- \"build\" # or \"zipcode\"\n# Calculate quantiles for `Capacity (MW)`\nsolar_build$`Capacity (KW)` <- solar_build$`Capacity (MW)`*1000\nquantiles <- quantile(solar_build$`Capacity (KW)`, probs = c(0.01, 0.95))\n\n# Use the quantiles to set the domain for colorNumeric\npal <- colorNumeric(palette = \"YlOrRd\", domain = c(quantiles[1], quantiles[2]))\n\n# Generate the map with adjusted zoom level and quantile-based color scaling\nmap <- leaflet(solar_build) %>%\n    addProviderTiles(providers$CartoDB.Positron) %>%\n    addPolygons(\n      layerId = ~Number,\n      fillColor = ~pal(`Capacity (KW)`),\n      color = \"#444444\",\n      weight = 1,\n      smoothFactor = 0.5,\n      popup = ~paste(\"Address:\", `Facility Address`,\n                     \"<br>Total Capacity (KW):\", `Capacity (KW)`\n                     ),\n      highlightOptions = highlightOptions(weight = 2, color = \"white\", bringToFront = TRUE)\n    ) %>%\n    setView(lng = -77.04026, lat = 38.93215, zoom = 16) # Adjusted zoom level\n\n# Add a mini-map with the specified position\nmap %>% addMiniMap(tiles = providers$CartoDB.Positron,\n                   toggleDisplay = TRUE,\n                   position = \"bottomright\")\n\n# <iframe height=\"400\" width=\"100%\" frameborder=\"yes\" src=\"https://hk939.shinyapps.io/dc_solar_shiny_fnl/\"> </iframe>\n\nprint(map)\n\n```\n\n\n\n## Modeling paradigms for solar adoption:\n\nNow that the data is consolidated, the next task is to model its diffusion process, and forecast it into the future.\n\nA popular approach is NREL's Distributed Renewable Generation model (`dGen`) model.\n\n\nIn a review of around 200 papers, Alipour et al (2021) found the types of modeling approaches:\n\n- **Qualitative: 8.2%**\n\n- **Statistical analysis : 56.7%**\n\n- **Simulation-based (ABMs, spatial, diffusion): 35.1%**\n\n\n### 1. Statistical approaches\n\n\nThe variables must account for these factors:\n\n- Spatial similarity or diffusion frameworks\n\n- Potential generation (revealed by the Google Solar API)\n\n- Actual energy use: This is the most difficult to get. Closest we can get is energy expenditures, and that only exists.\n\nTechniques:\n\n1. OLS and panel regressions\n2. Spatial regression models\n3. Tree-based estimation (XGBoost)\n4. Graph learning\n\nSynapse Inc.(2020) mentions that the high percentage of renters in the district means the incentive for households to spend on solar installation is low.\n\nAs a warm-up empirical test, let's test this out using data from the American Community Survey (ACS) 2020?\n\n### Example: Using Census data to check the relation between home-ownership and solar capacity added\n\nIdeally, we would have joined building-level data of owner vs renter occupation, but in its absence, we can use **block-group** level data\nfrom the ACS 2019 on homeownership rates. What does the ACS 2019 show about the characteristics of high-solar adoption areas?\n\n\n**Sample code: `tidyCensus`**\n\n```{r, echo=TRUE, eval=FALSE}\n#| code-fold: true\n#| code-summary: \"Sample `tidyCensus` code\"\n\nst_acs <- get_acs(variables = c(total_pop = \"B02001_001E\", \n                                  owner_occupied = \"B25003_002E\",\n                                  total_occupied = \"B25003_001E\"),\n                    geography = \"block group\",\n                    geometry = TRUE,\n                    state = \"DC\", \n                    year = 2019) \n```\n\n\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE, results=FALSE}\n\nbg_df <- st_read(\"data/solar_acs2019_bg.geojson\")\n\n# Perform a spatial join: add data from bg_df to df_sample based on their spatial relationship\n# zip_data <- zip_data %>%  st_make_valid()\n# joined_sf <- st_join(zip_data, bg_df, join = st_contains)\n\n# Improved plot for polygon sf object\n# basic_plot <- ggplot(data = bg_df) +\n#   geom_sf(aes(fill = total_capacity), color = \"black\", size = 0.2) +  # Fill polygons and add borders\n#   scale_fill_viridis(option = \"C\", direction = -1) +  # Viridis color scale\n#   labs(\n#     title = \"Per Capita Solar Capacity\",\n#     fill = \"Per Capita kW\",\n#     caption = \"Data Source: ACS 2019, DCPSC 2023\"\n#   ) +\n#   theme_minimal() +\n#   theme(\n#     legend.position = \"right\",\n#     plot.title = element_text(hjust = 0.5),  # Center the plot title\n#     plot.caption = element_text(hjust = 0, size = 8)  # Align caption\n#   )\n# \n# basic_plot\n# \n# model_1 <- lm(pc_capkw ~ own_rate, data = bg_df)\n# # Calculate robust standard errors\n# # robust_se1 <- vcovHC(model_1, type = \"HC1\")\n# # robust_se1 <- as.vector(coeftest(model_1, vcovHC(model_1, type = \"HC1\"))[, \"Std. Error\"])\n# -\n# Assuming 'joined_sf' is your dataframe with 'own_rate' and 'tot_capkw' variables.\n\n# Create 10 quantiles of ownership rate\nbg_df <- bg_df %>%\n  mutate(quantile = ntile(own_rate, 20)) %>%\n  filter(!is.na(quantile))\n\n# Compute the mean of 'tot_capkw' within each quantile\nquantile_avgs <- bg_df %>%\n  group_by(quantile) %>%\n  summarise(tot_cap = sum(total_capacity),\n            tot_pop = sum(total_pop)) %>%\n  mutate(cap_kw_pc_1k = 1000*tot_cap/tot_pop)\n\n###########################################################\n# Plot the averages as points\nggplot(quantile_avgs, aes(x = as.factor(quantile), y = cap_kw_pc_1k)) +\n   # Points with thin black boundary, colored blue\n  geom_point(aes(color = as.factor(quantile)), size = 3, shape = 21, fill = \"dodgerblue1\", color = \"black\", stroke = 1) +\n  # Black and thin line\n  geom_smooth(aes(x = as.numeric(as.factor(quantile))), method = \"loess\", formula = y ~ x, se = TRUE, color = \"black\", size = 0.8) +\n  # Labels and title\n  labs(x = \"Homeownership Rate (%)\", y = \"Capacity per 1000 people (KW)\", title = \"Capacity per 1000 people vs 2019 Ownership rate, block groups\") +\n  # Minimal theme and angle adjustment for x axis text\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),\n        legend.position = \"none\") +\n  # Adjust x-axis labels to show percentage values\n  scale_x_discrete(labels = seq(0, 95, by = 5))\n\n# Note: Replace 'joined_sf' with your actual dataframe name.\n###########################################################\n\n```\n\n\nThe above graph clearly shows that block groups with a higher share of homes inhabited by owners had higher per capita solar capacity,\nexpressed as KiloWatts per 1000 people.\n\nCheck out the full empirical modeling here [Coming Soon].\n\n### 2. Agent based models: NREL dGen \n\nThe National Renewable Energy Lab's [Distributed Generation Market Demand (dGen)](https://github.com/NREL/dgen?tab=readme-ov-file) model is defined as:\n>\n \"Statistically representative residential and commercial agents are ingested by the model and used to forecast PV adoption based on user specified configurations like electricity rate prices, electricity load growth, solar resource factors, and much more.\"\n>\n\nAlipour et al (2021) describe \n> \nself-governing households at the bottom of a social\n phenomenon where each decides heterogeneously and heuristi\ncally over time and space, but their aggregated decisions produce\n macro outcomes \n>\n\nThe model is available open-source on Github (linked above) as a deployable docker container on Github. \n\nDo we use the model off the shelf, or do we tweak and adapt it to our case? Stay tuned for the next post! (COMING SOON).","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(warning = FALSE, message = FALSE)\n\n# install packages\nlibrary(arrow)\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(sf)\nlibrary(sandwich)\nlibrary(viridis)  # for improved color scales\nlibrary(car)\nlibrary(lmtest)\nlibrary(stargazer)\nlibrary(broom)\nlibrary(lme4)\nlibrary(Matrix)\nlibrary(lmtest)\nlibrary(recipes)   # For preprocessing steps\nlibrary(modeldata) # For data splitting\nlibrary(caret)\nlibrary(googledrive)\nlibrary(kableExtra)\n\n\n```\n\n\nAs of 2022, solar energy provided about 3.4% of total U.S. utility-scale electricity (U.S. Energy Information Administration, 2024)\nAmong US cities, Honolulu tops the chart, with per capita solar photovoltaic (PV) capacity installed at 1133 Watts DC/person in 2022. \nWashington DC was at 10th rank by 2022 (leaping up from 17th in 2018.) [(Frontier Group, 2022)](https://frontiergroup.org/resources/shining-cities-2022/)\n\nThe most likely reason behind this boost was DC's **Renewable Portfolio Standards (RPS)** policies.\nRPS policies are regulatory mandates to increase the production of energy from renewable sources, requiring electric utilities to \nensure that a specified percentage of the energy they generate or sell comes from renewable sources by a certain date.\nDespite the lack of a comprehensive federal RPS, state-level mandates have collectively contributed to a significant increase \nin the country's renewable energy capacity, transforming the energy landscape and paving the way for a more sustainable future.\n\nDC's RPS is one of the country's most ambitious, as underscored by the **Clean Energy DC Omnibus Amendment Act of 2018.**\nThis act mandates that 100 percent of the Districtâ€™s electric supply be sourced from renewable generators by 2032. Additionally, \nit sets forth a solar \"carve-out\" requirement that 5.5 percent of the 2032 electric supply must come from in-District solar, with this percentage increasing\nto 10 percent by 2041. This places the District as the third jurisdiction in the U.S., following Hawai'i and California, to\nestablish a 100 percent renewable energy requirement.\n\nThe primary mechanism by which the DC Department of Energy and Environment (DOEE) influences the solar market is through **Solar Renewable Energy Credits (SRECs)**\nand **Alternative Compliance Payments (ACP).** \n\n\n::: {.callout-tip}\n### SRECs and ACP\n- **SREC:** Market-based instruments that represent the environmental benefits of generating solar power. \nEach SREC certifies that one megawatt-hour of solar electricity has been generated and can be sold or traded, providing an additional revenue stream for solar energy producers on top of the electricity they sell.\n\n- **ACP:** Penalties that electric utilities or other entities must pay if they fail to meet their renewable energy targets, specifically the portion of those targets that must be met through solar energy. \n:::\n\nThere have been several major policy changes in DC that affect solar adoption incentives, as summarized in this RPS report\n by the DC Public Service Commission (https://dcpsc.org/Orders-and-Regulations/PSC-Reports-to-the-DC-Council/Renewable-Energy-Portfolio-Standard.aspx)\n\n\n-\t**Distributed Generation Amendment Act, 2011**\n    -\tAmended RPS to increase solar requirements through 2023 to 2.5%.\n    - Restricted eligible solar energy resources to those within the District or connected to a feeder serving the District.\n\n- **Renewable Portfolio Standard Expansion Amendment Act, 2016**\n    - Increased RPS requirement to 50% by 2032, with solar energy requirement rising to 5%.\n    - Modified solar energy RPS compliance fees, setting new rates from 2016 through 2032.\n\n- **CleanEnergy DC Omnibus Amendment Act, 2018**\n    - Raised RPS to 100% by 2032, with solar energy requirement increasing to 5.5% by 2032 and 10% by 2041.\n    - Extended solar REC banking period from three to five years.\n\n- **Local Solar Expansion Amendment Act, 2022**\n\n    - Increased solar RPS requirement to 15% by 2041.\n    - Directed funds from alternative compliance payments to support low-income ratepayer relief and solar policy studies.\n    - Adjusted solar energy RPS compliance fees, gradually reducing them from 2024 through 2033, setting a fee of $0.30 per kWh from 2033 through 2041, and $0.10 thereafter.\n\n```{r, include=FALSE}\n\n# inset chatCompletion\n# Create the data frame\nyear <- 2011:2041\ntier_one_renewable_percent <- c(4, 5, 6.5, 8, 9.5, 11.5, 13.5, 15.5, 17.5, 20, 26.25, 32.5, 38.75, 45.0, 52.0, 59.0, 66.0, 73.0, 80.0, 87.0, 94.0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100)\nsolar_energy <- c(0.4, 0.5, 0.5, 0.6, 0.7, 0.825, 0.98, 1.15, 1.85, 2.175, 2.5, 2.6, 3.0, 3.65, 4.3, 5.0, 5.65, 6.3, 7.0, 7.65, 8.3, 9.0, 9.65, 10.3, 11.0, 11.65, 12.3, 13.0, 13.65, 14.3, 15.0)\n\ndata <- data.frame(year, tier_one_renewable_percent, solar_energy)\n\ndata$gap <- data$tier_one_renewable_percent-data$solar_energy\n\n# Assuming 'data' is your dataframe\n# Add a new column for the act labels\ndata$Act <- NA  # Initialize with NA\ndata$Act[data$year == 2011] <- \"Distributed Generation Amendment Act of 2011\"\ndata$Act[data$year == 2016] <- \"Renewable Portfolio Standard Expansion Amendment Act\"\ndata$Act[data$year == 2022] <- \"Clean Energy DC Omnibus Amendment Act\"\n\n# Now, plotting with enhancements and adding specific labels\np <- ggplot(data, aes(x = year)) +\n  geom_line(aes(y = tier_one_renewable_percent, color = \"Tier-One Renewable Percent\"), size = 1) +\n  geom_area(aes(y = tier_one_renewable_percent), fill = \"skyblue\", alpha = 0.5) +\n  geom_line(aes(y = solar_energy, color = \"Solar Energy\"), size = 1) +\n  geom_area(aes(y = solar_energy), fill = \"yellow\", alpha = 0.5) +\n  geom_point(aes(y = tier_one_renewable_percent), color = \"#0099f9\", size = 2) +\n  geom_label(data = data %>% filter(!is.na(Act)), aes(y = tier_one_renewable_percent, label = Act), nudge_x = 0.25, nudge_y = 0.25, check_overlap = TRUE, size = 3, label.size = 0) +\n  scale_color_manual(values = c(\"Tier-One Renewable Percent\" = \"#1f77b4\", \"Solar Energy\" = \"yellow\")) +\n  labs(x = \"Year\", y = \"Percent / Energy\", title = \"Tier-One Renewable Percent and Solar Energy Over Time\", color = \"Metrics\") +\n   xlim(2010, 2032) +\n  theme_minimal() +\n  theme(legend.position = \"top\",\n        legend.title = element_text(size = 12),\n        legend.text = element_text(size = 10),\n        plot.title = element_text(size = 16, face = \"bold\"),\n        axis.title = element_text(size = 14),\n        plot.margin = margin(10, 10, 10, 10))\n\n# Print the plot\nprint(p)\n\n\n```\n\n\n### Installed solar capacity has skyrocketed in DC. \n\nExisting empirical evidence finds that US states that closed off their SREC markets to out-of-state facilites witnessed higher\nsolar installation, as DC did in 2011. [(Cohen et al 2022)](https://doi.org/10.1111/ajae.12248)\n\nHowever, as the following animated graph shows, adoption *really* took off around 2016.\n\n```{r, echo=TRUE, eval=FALSE}\n#| code-fold: true\n#| code-summary: \"Sample `gganimate` code\"\n\n# Animate the plot\nanim <- p + transition_reveal(date) + \n  enter_grow() +  # Animation for entering points\n  exit_fade() +   # Animation for exiting points\n  ease_aes('cubic-in-out') + # Animation speed\n  labs(title = 'Year: {frame_along}', subtitle = \"Tier-One Renewable Percent\") # Update title with year\n\n# Render the animation\nanimate(anim, duration = 10, fps = 30, width = 800, height = 600, renderer =gifski_renderer())\n\n```\n\n```{r, echo=FALSE}\n\n# Fetch data for DC\n# Convert sf object to GeoJSON\n# st_write(joined_df, \"solar_acs2019_bg.geojson\", driver = \"GeoJSON\")\n\nlibrary(gganimate)\n\ndf_time <- read_csv('data/tot_solar_time.csv')\n\n#create the plot\np <- ggplot(df_time, aes(x = date, y = cum_mw)) +\n  geom_line(aes(group = 1), color = \"#1f77b4\", size = 1.2) +  # Increase line thickness with `size`\n  geom_point( color = \"#0099f9\") + # Draw points\n  labs(x = \"Year\", y = \"Capacity added (MW)\", title = \"Solar Boom in DC\") +\n   ggthemes::theme_solarized() +\n   theme(\n    text = element_text(color = \"black\"), # Make all text black\n    plot.title = element_text(size = 26, face = \"bold\", color = \"black\"), # Enlarge and bolden the title\n    axis.title = element_text(size = 20, face = \"bold\", color = \"black\"), # Bolden axis titles\n    axis.text = element_text(size = 18) # Adjust size of axis text if needed\n  ) \n  # theme(legend.position = \"none\") # Hide the legend\n# Creating the plot with ggplot2\n\n# Animate the plot\nanim <- p + transition_reveal(date) + \n  enter_grow() +  # Animation for entering points\n  exit_fade() +   # Animation for exiting points\n  ease_aes('cubic-in-out') + # Animation speed\n  labs(title = 'Year: {frame_along}', subtitle = \"Tier-One Renewable Percent\") # Update title with year\n\n# Render the animation\nanimate(anim, duration = 10, fps = 30, width = 600, height = 400, renderer =gifski_renderer())\n\n# Save the animation\n# anim_save(\"dc_solar_anim.gif\", animation = anim)\n\n\n# ts_data_ts <- ts(df_time %>% select(date, cum_mw))\n# \n# library(strucchange)\n# bp <- breakpoints(ts_data_ts ~ 1)\n# \n# plot(bp)\n# # Assuming ts_data is your time series data\n# cpt.mean <- cpt.mean(ts_data, method=\"PELT\")\n# \n#   # Plot the changes\n# plot(cpt.mean)\n# # Display the plot\n# # ggsave(\"renewable_energy_plot.png\", width = 14, height = 7, dpi = 100)\n\n```\n\n\nMeasuring *actual generation*, as opposed to capacity installed, is trickier.\nIn 2022, the total retail electricity sales reported by suppliers in the District were 10.16 million MWh. \nTo put this in perspective, Hawaii's consumption in 2022 was around 9 million MWh, despite \nbeing 60 times larger in area and with 2x the population! ([EIA 2022](https://www.eia.gov/electricity/state/))\n\n\"The total number of SRECs retired for compliance was 263,919, which is equivalent to nearly 264,000 MWh and \nrepresents about 2.6% of the total retail electricity sales for the year\"â€‹â€‹. [(DC Public Service Commission, 2023)](https://dcpsc.org/Utility-Information/Electric/RPS/Renewable-Energy-Portfolio-Standard-Program/Monthly-Update-of-Solar-Generator-Certification.aspx_)\nOf course, SRECs can be held before they are cashed - it indicates that by this date, there has been *at least* 264,000 MWh generation of solar. \n\n\n## The DC Solar Market - Incentives and Costs\n\nIn Washington DC, the average solar panel costs [$11,000-$14,000](https://www.solarreviews.com/solar-panels/district-of-columbia) after federal incentives\n\nA household in DC can factor in three types of incentives available for a solar installation :\n\n- Federal rebates\n\n- SREC prices\n\n- Net metering\n\nThere is another type of indirect incentive, which might function as a 'stick' to the above 'carrots'. \nThis is the [**Building Energy Benchmarking Policy (BEPS)**](https://doee.dc.gov/service/building-energy-performance-standards-beps), which aims to identify and impose financial penalties on large buildings (>10,000 sq feet) with greater than average energy consumption\n\nThe following figures describe the outlook for solar generation in the District:\n\n- Technical potential = 1200 MW\n- Target by 2040 = 665 MW\n- Adoption in 2023 = 201 MW\n\nThe above figures are from a report by [Synapse Energy Economics](https://www.synapse-energy.com/sites/default/files/OPCs-Study-on-Future-of-Solar-PV-in-the-District-of-Columbia-18-077.pdf), where it also lays out the factors holding back adoption in DC.\nFor now, we zoom in on one particular factor laid out in the report:\n\n\"Given that **60 percent of households in the District are renter-occupied**, home ownership and upfront costs are likely strong barriers to solar adoption\"\n\n\n## Creating a building-level dataset to examine solar adoption\n\nWith the help of DC Open Dataâ€™s frequently updated and granular data on buildings, we can merge data solar and building attributes data\nfor almost all of DCâ€™s >100,000 residential buildings. \n\n - [DC PSC Monthly Update of Solar generator certification](https://dcpsc.org/Utility-Information/Electric/RPS/Renewable-Energy-Portfolio-Standard-Program/Monthly-Update-of-Solar-Generator-Certification.aspx_)\n   Geocoded dataset of all approved solar panels in Washington DC.\n\n - [Computer Assisted Mass Appraisal (CAMA)](https://opendata.dc.gov/datasets/c5fb3fbe4c694a59a6eef7bf5f8bc49a)\n   \n   Building attributes, sourced from tax records properties in Washington, D.C. Contains data on building attributes. \n\n::: {.callout-important}\n## Note: Merging properties with SSL\nLinking these two datasets is more complex than a single merge. Solar records are given for an address, but CAMA records are linked to Square Suffix Lot (SSL) numbers, \nwhich identifies the plot of land on which a building is located. Some lots have multiple buildings, and some buildings/complexes \nspan multiple lots.\n:::\n\nThe following table shows a small sample of the rows and columns in our resulting dataset.\n\n```{r, echo=FALSE}\n\n\n## AUTHENTICATE Google DRIVE account\n# drive_auth()\n# \n# \n# # download this to local drive\n#                path = \"output_data/residential_cross_sec.parquet\", overwrite = TRUE)\n\ndf <- read_parquet('data/cross_sec_api_12k.parquet')\ndf$cap_kw <- df$`Capacity (MW)`*1000\n\ndf$lat <- df$LATITUDE\ndf$lon <- df$LONGITUDE\ndf <- df %>%\n  filter(!is.na(lat) & !is.na(lon) \n         & lat != \"NA\" & lon != \"NA\") %>%\n  st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326) %>%\n   mutate(cap_kw = replace_na(cap_kw, 0))\n\n\n# add census block group data\n###############\n\nquantile_99 <- quantile(df$cap_kw, 0.99, na.rm = TRUE)\n\n\n# Preparing subsets\ndf_with_0 <- df %>% \n  filter(cap_kw == 0) %>%\n  select(SSL, STYLE_D, ROOF_D, NBHDNAME, cap_kw, max_sun_hours, min_dc_kwh) %>%\n  sample_n(2)\n\ndf_without_0 <- df %>%\n  filter(`Capacity (MW)` > 0 & `Capacity (MW)` <= quantile_99) %>%\n  select(SSL, STYLE_D, ROOF_D, NBHDNAME, cap_kw, max_sun_hours, min_dc_kwh)%>%\n  sample_n(3)\n\n# Combining the subsets\ndf_sample <- bind_rows(df_with_0, df_without_0)\n\n# drop geom\ndf_sample <- st_set_geometry(df_sample, NULL)\n\n#save\ndf_sample <- df_sample %>% select(SSL, STYLE_D, ROOF_D, NBHDNAME, cap_kw, max_sun_hours, min_dc_kwh)\n\n# write_csv(df_sample, 'kable_tab.csv')\n# \n# # Apply cell_spec to cap_mw for dynamic coloring\ndf_sample$cap_kw <- cell_spec(df_sample$cap_kw, \"html\",\n                              color = \"white\",\n                              bold = TRUE,\n                              background = spec_color(df_sample$cap_kw, end = 0.9, option = \"A\"))\n\n# Generating the table\nknitr::kable(df_sample, \"html\", escape = FALSE) %>%\n  kable_styling(full_width = F, fixed_thead=TRUE,\n                bootstrap_options = c(\"striped\", \"hover\"))\n\n\n```\n\n\n\nTwo variables have been called from the [Google Solar API](https://developers.google.com/maps/documentation/solar/reference/rest/v1/buildingInsights/findClosest) for these building locations:\n\n- `max_sun_hours`: Maximum number of sunshine hours received per year, by any point on the roof\n\n- `min_dc_kwh`: How much sunlight energy the roof captures in (direct current) DC kWh, assuming a certain minimum number of panels. (This is a transformed variable)\n\nThe above example illustrates the fundamental prediction problem facing us - will these buildings adopt?\n\nThey seem to be as suitable as the buildings in the bottom 3 rows, receiving high amounts of annual sunlight (from the supply side).\n\n\n\nThe fact that the solar data has both the exact location and date of solar panel installation, added with DC Open Data's rich repository\nof spatial building-level datasets implies that we can drill down at the hyperlocal level for insights in solar adoption patterns.\n\n\n```{r, echo=FALSE}\nlibrary(leaflet)\nlibrary(RColorBrewer)\n\nward_data <- readRDS(\"data/ward_solar.rds\")\nzip_data <- readRDS(\"data/zipcode_solar.rds\")\nsolar_build <- readRDS(\"data/solar_build.rds\")\n\n# Check the spatial level and generate the map accordingly\npal <- colorNumeric(palette = \"YlOrRd\", domain = data$total_capacity_mw)\n  \n# map <- leaflet(zip_data) %>%\n#     addProviderTiles(providers$CartoDB.Positron) %>%\n#     addPolygons(\n#       layerId = ~NAME,\n#       fillColor = ~pal(total_capacity_mw),\n#       color = \"#444444\",\n#       weight = 1,\n#       smoothFactor = 0.5,\n#       popup = ~paste(\"Zip/Ward:\", NAME,\n#                      \"<br>Total Capacity MW:\", total_capacity_mw,\n#                      \"<br>Percentage Solar:\", perc_solar),\n#       highlightOptions = highlightOptions(weight = 2, \n#                                           color = \"white\",\n#                                           bringToFront = TRUE))\n\n# print(map)\n\n########################################################3\n## building\n\nspatialLevel <- \"build\" # or \"zipcode\"\n# Calculate quantiles for `Capacity (MW)`\nsolar_build$`Capacity (KW)` <- solar_build$`Capacity (MW)`*1000\nquantiles <- quantile(solar_build$`Capacity (KW)`, probs = c(0.01, 0.95))\n\n# Use the quantiles to set the domain for colorNumeric\npal <- colorNumeric(palette = \"YlOrRd\", domain = c(quantiles[1], quantiles[2]))\n\n# Generate the map with adjusted zoom level and quantile-based color scaling\nmap <- leaflet(solar_build) %>%\n    addProviderTiles(providers$CartoDB.Positron) %>%\n    addPolygons(\n      layerId = ~Number,\n      fillColor = ~pal(`Capacity (KW)`),\n      color = \"#444444\",\n      weight = 1,\n      smoothFactor = 0.5,\n      popup = ~paste(\"Address:\", `Facility Address`,\n                     \"<br>Total Capacity (KW):\", `Capacity (KW)`\n                     ),\n      highlightOptions = highlightOptions(weight = 2, color = \"white\", bringToFront = TRUE)\n    ) %>%\n    setView(lng = -77.04026, lat = 38.93215, zoom = 16) # Adjusted zoom level\n\n# Add a mini-map with the specified position\nmap %>% addMiniMap(tiles = providers$CartoDB.Positron,\n                   toggleDisplay = TRUE,\n                   position = \"bottomright\")\n\n# <iframe height=\"400\" width=\"100%\" frameborder=\"yes\" src=\"https://hk939.shinyapps.io/dc_solar_shiny_fnl/\"> </iframe>\n\nprint(map)\n\n```\n\n\n\n## Modeling paradigms for solar adoption:\n\nNow that the data is consolidated, the next task is to model its diffusion process, and forecast it into the future.\n\nA popular approach is NREL's Distributed Renewable Generation model (`dGen`) model.\n\n\nIn a review of around 200 papers, Alipour et al (2021) found the types of modeling approaches:\n\n- **Qualitative: 8.2%**\n\n- **Statistical analysis : 56.7%**\n\n- **Simulation-based (ABMs, spatial, diffusion): 35.1%**\n\n\n### 1. Statistical approaches\n\n\nThe variables must account for these factors:\n\n- Spatial similarity or diffusion frameworks\n\n- Potential generation (revealed by the Google Solar API)\n\n- Actual energy use: This is the most difficult to get. Closest we can get is energy expenditures, and that only exists.\n\nTechniques:\n\n1. OLS and panel regressions\n2. Spatial regression models\n3. Tree-based estimation (XGBoost)\n4. Graph learning\n\nSynapse Inc.(2020) mentions that the high percentage of renters in the district means the incentive for households to spend on solar installation is low.\n\nAs a warm-up empirical test, let's test this out using data from the American Community Survey (ACS) 2020?\n\n### Example: Using Census data to check the relation between home-ownership and solar capacity added\n\nIdeally, we would have joined building-level data of owner vs renter occupation, but in its absence, we can use **block-group** level data\nfrom the ACS 2019 on homeownership rates. What does the ACS 2019 show about the characteristics of high-solar adoption areas?\n\n\n**Sample code: `tidyCensus`**\n\n```{r, echo=TRUE, eval=FALSE}\n#| code-fold: true\n#| code-summary: \"Sample `tidyCensus` code\"\n\nst_acs <- get_acs(variables = c(total_pop = \"B02001_001E\", \n                                  owner_occupied = \"B25003_002E\",\n                                  total_occupied = \"B25003_001E\"),\n                    geography = \"block group\",\n                    geometry = TRUE,\n                    state = \"DC\", \n                    year = 2019) \n```\n\n\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE, results=FALSE}\n\nbg_df <- st_read(\"data/solar_acs2019_bg.geojson\")\n\n# Perform a spatial join: add data from bg_df to df_sample based on their spatial relationship\n# zip_data <- zip_data %>%  st_make_valid()\n# joined_sf <- st_join(zip_data, bg_df, join = st_contains)\n\n# Improved plot for polygon sf object\n# basic_plot <- ggplot(data = bg_df) +\n#   geom_sf(aes(fill = total_capacity), color = \"black\", size = 0.2) +  # Fill polygons and add borders\n#   scale_fill_viridis(option = \"C\", direction = -1) +  # Viridis color scale\n#   labs(\n#     title = \"Per Capita Solar Capacity\",\n#     fill = \"Per Capita kW\",\n#     caption = \"Data Source: ACS 2019, DCPSC 2023\"\n#   ) +\n#   theme_minimal() +\n#   theme(\n#     legend.position = \"right\",\n#     plot.title = element_text(hjust = 0.5),  # Center the plot title\n#     plot.caption = element_text(hjust = 0, size = 8)  # Align caption\n#   )\n# \n# basic_plot\n# \n# model_1 <- lm(pc_capkw ~ own_rate, data = bg_df)\n# # Calculate robust standard errors\n# # robust_se1 <- vcovHC(model_1, type = \"HC1\")\n# # robust_se1 <- as.vector(coeftest(model_1, vcovHC(model_1, type = \"HC1\"))[, \"Std. Error\"])\n# -\n# Assuming 'joined_sf' is your dataframe with 'own_rate' and 'tot_capkw' variables.\n\n# Create 10 quantiles of ownership rate\nbg_df <- bg_df %>%\n  mutate(quantile = ntile(own_rate, 20)) %>%\n  filter(!is.na(quantile))\n\n# Compute the mean of 'tot_capkw' within each quantile\nquantile_avgs <- bg_df %>%\n  group_by(quantile) %>%\n  summarise(tot_cap = sum(total_capacity),\n            tot_pop = sum(total_pop)) %>%\n  mutate(cap_kw_pc_1k = 1000*tot_cap/tot_pop)\n\n###########################################################\n# Plot the averages as points\nggplot(quantile_avgs, aes(x = as.factor(quantile), y = cap_kw_pc_1k)) +\n   # Points with thin black boundary, colored blue\n  geom_point(aes(color = as.factor(quantile)), size = 3, shape = 21, fill = \"dodgerblue1\", color = \"black\", stroke = 1) +\n  # Black and thin line\n  geom_smooth(aes(x = as.numeric(as.factor(quantile))), method = \"loess\", formula = y ~ x, se = TRUE, color = \"black\", size = 0.8) +\n  # Labels and title\n  labs(x = \"Homeownership Rate (%)\", y = \"Capacity per 1000 people (KW)\", title = \"Capacity per 1000 people vs 2019 Ownership rate, block groups\") +\n  # Minimal theme and angle adjustment for x axis text\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),\n        legend.position = \"none\") +\n  # Adjust x-axis labels to show percentage values\n  scale_x_discrete(labels = seq(0, 95, by = 5))\n\n# Note: Replace 'joined_sf' with your actual dataframe name.\n###########################################################\n\n```\n\n\nThe above graph clearly shows that block groups with a higher share of homes inhabited by owners had higher per capita solar capacity,\nexpressed as KiloWatts per 1000 people.\n\nCheck out the full empirical modeling here [Coming Soon].\n\n### 2. Agent based models: NREL dGen \n\nThe National Renewable Energy Lab's [Distributed Generation Market Demand (dGen)](https://github.com/NREL/dgen?tab=readme-ov-file) model is defined as:\n>\n \"Statistically representative residential and commercial agents are ingested by the model and used to forecast PV adoption based on user specified configurations like electricity rate prices, electricity load growth, solar resource factors, and much more.\"\n>\n\nAlipour et al (2021) describe \n> \nself-governing households at the bottom of a social\n phenomenon where each decides heterogeneously and heuristi\ncally over time and space, but their aggregated decisions produce\n macro outcomes \n>\n\nThe model is available open-source on Github (linked above) as a deployable docker container on Github. \n\nDo we use the model off the shelf, or do we tweak and adapt it to our case? Stay tuned for the next post! (COMING SOON)."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"html_document":{"code-fold":true}},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"dc_solar_web.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","theme":"flatly","title":"Rooftop solar adoption in Washington DC","author":"Kumar H","date":"2024-03-02"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}