{"title":"BlocPower Report","markdown":{"yaml":{"title":"BlocPower Report","author":[{"name":"EIDC","affiliations":[{"name":"Georgetown University"}]}],"date":"`r Sys.Date()`","format":{"html":{"toc":true,"embed-resources":true,"theme":"default","code-copy":true,"code-fold":true,"code-line-numbers":true,"number-sections":true,"highlight-style":"github","page-layout":"full"}},"jupyter":"python3"},"headingText":"Set interactivity to all","containsRefs":false,"markdown":"\n\n```{python}\nimport time\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport folium\nimport zipfile\nfrom h3 import h3\nfrom scipy.linalg import toeplitz\nfrom scipy.stats import pearsonr\nfrom sklearn.preprocessing import MinMaxScaler\nfrom shapely.geometry import Point, Polygon\nfrom shapely import wkt, affinity\nfrom shapely.wkt import loads\nfrom branca.colormap import linear\nfrom IPython.core.interactiveshell import InteractiveShell\nfrom h3 import h3\n\nfrom shapely import wkt\nimport os\nimport geopandas as gpd\nimport folium\n\nimport contextily as cx\n\nfrom shapely.geometry import Point\n```\n\nSet up Gurobi license\n\nhttps://www.gurobi.com/documentation/9.5/quickstart_windows/reading_and_optimizing_a_m.html\n\n\n\n# Optimization of building energy efficiency interventions using BlocPower data\n\n## Introduction\nBuilding decarbonization is a critical component of the multiple transitions needed to combat climate change. The Inflation Reduction Act of 2022 provides unprecedented incentives for households to install home improvements for electrification and energy efficiency, like installing heat pumps instead of fossil-fuel powered heaters and weatherization/insulation (https://www.nytimes.com/interactive/2023/climate/tax-breaks-inflation-reduction-act.html)\n\nThese efforts have been aided by technological advances in the form of fine-grained building-level data, recently available at nationwide scale. One such dataset - developed by BlocPower - uses data on building type and equipment (single -family/multi-family, heating and cooling systems) sourced from tax assessment records. It then uses them as inputs for energy modeling algorithms/software developed by the Department of Energy. Crucially, this allows estimation of counterfactuals, i.e. the reduction in energy usage that would result from targeted retrofits. BlocPower’s own core operation takes building data for a city, uses their proprietary algorithm to estimate the ideal intervention, potential cost of a retrofit, and projected reduction in energy use (it also provides financing options).\n\nFinance is the key variable in these ambitious transition plans. Many of the new policies provide incentives like tax credits and rebates, instead of direct transfers to finance retrofits. However, it is useful to get an estimate of the total cost required to achieve a specified reduction in energy use and emissions from buildings. (This is also useful where governments are spending money directly to decarbonize their own building portfolios). https://www.whitehouse.gov/briefing-room/statements-releases/2022/12/07/fact-sheet-biden-harris-administration-announces-first-ever-federal-building-performance-standard-catalyzes-american-innovation-to-lower-energy-costs-save-taxpayer-dollars-and-cut-emissions/\n\nThe set of possible interventions for each building can consist of:\n\nWeatherization\nEnergy efficiency retrofits/electrification\nRooftop solar\nLinear programming formulation\nDespite some differences in these particular interventions, the basic structure requires an upfront cost to be spent on a building, after which its energy usage will go down by some factor (i.e. there will be energy savings). For our current purpose, let weatherization be the only building intervention we consider. We abstract away the exact financing mechanisms included in the IRA and BIL (rebates and incentives), and assume that the local government has a fixed budget to allocate for weatherizing buildings. The objective is to maximize energy savings - or equivalently, reduce emissions - subject to the constraint that the total cost cannot be larger than the budget. For this, we need recommendations of which buildings to target.\n\nLinear programming is a well-established mathematical tool used for policy purposes, starting from optimizing military logistics during WW2 to optimizing the energy source mixture (see appendix). This problem formulation fits well with a linear programming framework. Specifically, this is an example of a Mixed-Integer Programming (MIP) problem, as the solution must be an integer (we can't weatherize 3.6 buildings).\n\nRead in geocoded building data (Madisonville, KY)¶\n\n```{python}\n# # # Load data blocpower\n# # zipdf = pd.read_csv(\"Merged_CJEST.csv\")\n\n# # mic = pd.read_csv(\"Microsoft_Building_zip.csv\")\n# # ########################################################################\n\n# # mic['zcta'] = mic['zcta'].astype(str)\n\n# # zipdf['zipcode'] = zipdf['zipcode'].astype(str)\n# # zipdf = zipdf.merge(mic, how='left', left_on='zipcode', right_on='zcta')\n\n# # # Load the shapefile of zipcodes from the US Census Bureau website\n# # tiger_shp_url = 'https://www2.census.gov/geo/tiger/TIGER2022/ZCTA520/tl_2022_us_zcta520.zip'\n# # zip_shp = gpd.read_file(tiger_shp_url)\n# # # no state column in 2022 file\n\n\n# # # Rename the ZIP code column to \"zip\" and select the \"zip\" and \"geometry\" columns\n# # zip_shp = zip_shp.rename(columns={\"GEOID\": \"zip_code\",\n# #                                   \"geometry\": \"zip_geom\"})\n# # # zip_shp = zip_shp[['zip_name', 'zip_fips', 'geometry']]\n\n# # zip_shp['zcta_shp'] = zip_shp.ZCTA5CE20.astype(str)\n# # zipdf['zcta_bp'] = zipdf.zipcode.astype(str)\n\n\n# # zip_shp = zip_shp.merge(zipdf, how='left', left_on='zcta_shp', right_on='zcta_bp')\n\n# # zip_shp = zip_shp[~(zip_shp.state_code.isin(['AK', 'HI']))]\n\n# # #zip_shp = gpd.GeoDataFrame(zip_shp, geometry='zip_geom', crs='epsg:4326')\n\n# # zip_shp.to_csv(r'C:\\Users\\HK\\Downloads\\Final_Report\\Final_Report\\cejst_bp_zip_shp.csv')\n\n\n# zipdf = pd.read_csv('cejst_bp_zip_shp.csv')\n\n# zipdf['zip_geom'] = zipdf['zip_geom'].apply(wkt.loads)\n# zipdf = gpd.GeoDataFrame(zipdf, geometry = zipdf['zip_geom'], crs='epsg:4326')\n# zipdf = zipdf.round(2)\n\n\n# # Load the shapefile of counties from the US Census Bureau \n# state_url = 'https://www2.census.gov/geo/tiger/TIGER2022/STATE/tl_2022_us_state.zip'\n# st_shp = gpd.read_file(state_url)\n# statedf = pd.read_csv('state_shp.csv')\n# st_shp = st_shp.merge(statedf, left_on='STUSPS', right_on='num_state', how='inner')\n```\n\n## Interactive plotly map in Quarto\n\nhttps://quarto.org/docs/interactive/widgets/jupyter.html\n\n# 1.  Introduction\n\n\n## 1.1 Current Policy Context \n\nhttps://www.bloomberg.com/news/articles/2023-05-11/biden-adopts-new-green-building-energy-standards-for-housing\n\n## 1.2 Related literature and data\n\nOver the past year, the Environmental Impact Data Collaborative has partnered with BlocPower - a Brooklyn-based climate technology company that uses building-level energy use data to guide community decarbonization projects. A key element of this partnership has been EIDC’s role in helping make BlocPower’s data available to researchers in the  environmental justice space.\n\nBlocPower uploaded 3,309 data points for more than 121 million buildings to EIDC. This data is stored in Amazon Web Services and was transferred to Redivis using the built-in RestAPI. Additionally, this process occurred in two phases: first, BlocPower uploaded data for 39 states in January 2023, and second, they uploaded data for the additional 11 states and Washington D.C. in April 2023. This was ingested on MDI EIDC’s Google Cloud storage.\n\n[Sources]\n\nThe source of this data is tax assessment records, which provide real data on building system types and attributes (like built year and area). This data then serves as inputs to an Automatic Building Energy Modeling (AutoBEM) developed by Oak Ridge National Laboratory\n\n\nRECS\n\n## 1.3 Data Availability - Kentucky\n\n```{python}\n\n# Specify the path to your zip file and the extraction directory\nzip_path = \"data/geocoded_kentucky_zip_buildings.zip\"\n\n# Specify the csv file name if known; otherwise, you can list contents and choose\ncsv_file_name = \"geocoded_kentucky_zip_buildings.csv\"\n\n# Use zipfile to extract\nwith zipfile.ZipFile(zip_path, 'r') as zip_ref:\n    # If you know the name of the csv file you can extract it directly\n    zip_ref.extract(csv_file_name)\n\ndf = pd.read_csv(r\"geocoded_kentucky_zip_buildings.csv\")  # Reference any table in this project\n\n# df.to_parquet(r'D:\\Work\\Georgetown\\acad\\mdi\\final_portfolio\\blocpower-building-energy\\ky_buildings.parquet')\n```\n\n```{python}\n\ntest = df[['geocoded', 'building_id' , 'building_type' , 'heating_fuel_type', 'total_site_energy_GJ',\n            \"address\", \"area_sq_ft\", \"energy_use_intensity\"]]\n\ntest = test[test['heating_fuel_type'] != 'Unknown']\ntest = test.dropna(subset=['heating_fuel_type'])\n#test = test.sample(frac=0.8).reset_index()\ntest['geocoded'] = test['geocoded'].str.replace('(','').str.replace(')','') # Remove parentheses\ntest[['lat', 'lon']] = test['geocoded'].str.split(',', expand=True)\ntest['lat'] = test['lat'].astype(float)\ntest['lon'] = test['lon'].astype(float)\n\n# Convert latitude and longitude to a point\ntest['geometry'] = test.apply(lambda row: Point(row.lon, row.lat), axis=1)\n```\n\n# Model 1: Basic\n## Model Formulation\n\n- **Google Doc**: [Google Doc Link](https://docs.google.com/document/d/1JikyyMgS6zkjCQZMJQrtv8sU_ut1Uf0n8xkclPbHVg8/edit)\n- **Paper**: [ScienceDirect Paper Link](https://www.sciencedirect.com/science/article/pii/S0306261922010510)\n\n### Sets and Indices\n- $i \\in T$: Index and set of potential buildings to weatherize.\n\n### Parameters\n- $c_i \\in \\mathbb{R}_+$: The cost of weatherizing building $i$.\n- $e_i \\in \\mathbb{R}_+$: The energy use of building $i$.\n\n### Decision Variables\n- $w_i \\in [0,1]$: This variable is equal to 1 if building $i$ is weatherized; and 0 otherwise.\n\n### Objective Function\n- **Energy savings**: We seek to maximize the total energy savings from all buildings.\n  - Maximize \n  $Z = \\sum_{i \\in T} e_i \\cdot w_i$` $(1)$\n\n### Constraints\n- **Budget**: We need to ensure that the total cost of interventions does not exceed the allocated budget.\n  - $\\sum_{i \\in T} c_i \\cdot w_i \\leq \\text{budget}$ $(2)$\n  - Budget = USD 3,000,000\n\n### Parameters\n- **Costs**: The complication is that the cost $c_i$ and energy savings $e_i$ is different for each building, based on the chosen intervention and the building's own characteristics. Installing a heat pump or weatherizing in a gas-heating building of 6,000 sq. ft. would have a different cost from installing the same equipment in an oil-heating building of 3,000 sq. ft. Depending on local labor and material costs, even the exact same project on comparable buildings would have different costs in Wichita and Ithaca.\n\n#### Industry experts have the following input:\n\n- Engie: 'Because of the wide variations, a heuristic approach is probably the best you can do.'\n- BlocPower: 'The cost estimation is a process which requires local data, personnel hours and itself has an expense associated with it'\n\n### Energy savings:\n- The original paper by Heleno et al (2022) seems to use a heuristic approach, by calculating cost and savings factors from the Weatherization Assistance Program (WAP) for different types of building archetypes. [ScienceDirect Paper Link](https://www.sciencedirect.com/science/article/pii/S0306261922010510)\n\nFor this current example, we assume the following factors. So, weatherizing a gas-heated building reduces energy use by 4% and costs 2000 USD.\n\n#### Energy savings factors:\n- Gas Buildings = 0.96\n- Oil Buildings = 0.98\n\n#### Cost:\n- Gas buildings = 2000\n- Oil Buildings = 3000\n\nMultiply the above factors with the cost and energy columns to obtain 2 new columns per building, `$e_i$` (energy savings after weatherization) and `$c_i$` (cost of weatherization).\n\n\nhttps://www.sciencedirect.com/science/article/pii/S0306261922010510\n\nEnergy savings achieved: 61656.41 GJ\nCost of intervention: USD 3000000\nBuildings weatherized: 1442\nVisualize recommendations on map\n\n```{python}\n\n# gdf = gdf.round(2)\n# # merge to optimized dataframe\n# gdf = gdf.merge(test, left_on='building_id', right_on='building_id', how='inner')\n\n# Convert the DataFrame to a GeoDataFrame\ngdf = gpd.GeoDataFrame(test, geometry='geometry', crs='epsg:4326')\n\n# create retrofit column\n# gdf['Retrofit?'] = gdf['opt'].apply(lambda x: 'YES' if x == 1 else 'NO')\n\n#round energy savings column\n# gdf['energy_savings'] = gdf['energy_savings'].round(3)\n\nm1 = gdf.explore(\"energy_use_intensity\", #tooltip=False, #categorical=True, \n                 tooltip=[\"address\", \"area_sq_ft\", \"energy_use_intensity\",\n                        \"building_type\", \"heating_fuel_type\"])\n\n # Set `preferCanvas` to optimize performance of map\nm1.options[\"preferCanvas\"] = True\n\n#set a tile layer - OSM\nfolium.TileLayer(\"OpenStreetMap\").add_to(m1)\nm1\n```\n\n```{python}\nm1.save\n```\n\n## H3\n\n```{python}\nfrom h3 import h3\n\n\ndef update_map(h3_level=10):\n    def lat_lng_to_h3(row):\n        return h3.geo_to_h3(row.geometry.y, row.geometry.x, h3_level)\n\n    gdf['h3'] = gdf.apply(lat_lng_to_h3, axis=1)\n\n    counts = gdf[gdf['energy_use_intensity'] > np.median(gdf['energy_use_intensity'])].groupby('h3').size().reset_index(name='count')\n    \n    def add_geometry(row):\n        points = h3.h3_to_geo_boundary(row['h3'], True)\n        return Polygon(points)\n\n    counts['geometry'] = counts.apply(add_geometry, axis=1)\n    ky_hex = gpd.GeoDataFrame(counts, geometry='geometry', crs='EPSG:4326')\n\n    m = folium.Map(location=[37.3, -87.56], zoom_start=12)\n\n    colormap = linear.YlOrRd_09.scale(ky_hex['count'].min(), ky_hex['count'].max())\n\n    folium.GeoJson(\n        ky_hex,\n        name='geojson',\n        style_function=lambda feature: {\n            'fillColor': colormap(feature['properties']['count']),\n            'color': 'black',\n            'weight': .8,\n            'fillOpacity': 0.7,\n        },\n        tooltip=folium.GeoJsonTooltip(fields=['count'])\n    ).add_to(m)\n\n    colormap.add_to(m)\n\n    return m\n\nupdate_map(h3_level=9)\n```\n\n","srcMarkdownNoYaml":"\n\n```{python}\nimport time\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport folium\nimport zipfile\nfrom h3 import h3\nfrom scipy.linalg import toeplitz\nfrom scipy.stats import pearsonr\nfrom sklearn.preprocessing import MinMaxScaler\nfrom shapely.geometry import Point, Polygon\nfrom shapely import wkt, affinity\nfrom shapely.wkt import loads\nfrom branca.colormap import linear\nfrom IPython.core.interactiveshell import InteractiveShell\nfrom h3 import h3\n\nfrom shapely import wkt\nimport os\nimport geopandas as gpd\nimport folium\n\nimport contextily as cx\n\nfrom shapely.geometry import Point\n# Set interactivity to all\n```\n\nSet up Gurobi license\n\nhttps://www.gurobi.com/documentation/9.5/quickstart_windows/reading_and_optimizing_a_m.html\n\n\n\n# Optimization of building energy efficiency interventions using BlocPower data\n\n## Introduction\nBuilding decarbonization is a critical component of the multiple transitions needed to combat climate change. The Inflation Reduction Act of 2022 provides unprecedented incentives for households to install home improvements for electrification and energy efficiency, like installing heat pumps instead of fossil-fuel powered heaters and weatherization/insulation (https://www.nytimes.com/interactive/2023/climate/tax-breaks-inflation-reduction-act.html)\n\nThese efforts have been aided by technological advances in the form of fine-grained building-level data, recently available at nationwide scale. One such dataset - developed by BlocPower - uses data on building type and equipment (single -family/multi-family, heating and cooling systems) sourced from tax assessment records. It then uses them as inputs for energy modeling algorithms/software developed by the Department of Energy. Crucially, this allows estimation of counterfactuals, i.e. the reduction in energy usage that would result from targeted retrofits. BlocPower’s own core operation takes building data for a city, uses their proprietary algorithm to estimate the ideal intervention, potential cost of a retrofit, and projected reduction in energy use (it also provides financing options).\n\nFinance is the key variable in these ambitious transition plans. Many of the new policies provide incentives like tax credits and rebates, instead of direct transfers to finance retrofits. However, it is useful to get an estimate of the total cost required to achieve a specified reduction in energy use and emissions from buildings. (This is also useful where governments are spending money directly to decarbonize their own building portfolios). https://www.whitehouse.gov/briefing-room/statements-releases/2022/12/07/fact-sheet-biden-harris-administration-announces-first-ever-federal-building-performance-standard-catalyzes-american-innovation-to-lower-energy-costs-save-taxpayer-dollars-and-cut-emissions/\n\nThe set of possible interventions for each building can consist of:\n\nWeatherization\nEnergy efficiency retrofits/electrification\nRooftop solar\nLinear programming formulation\nDespite some differences in these particular interventions, the basic structure requires an upfront cost to be spent on a building, after which its energy usage will go down by some factor (i.e. there will be energy savings). For our current purpose, let weatherization be the only building intervention we consider. We abstract away the exact financing mechanisms included in the IRA and BIL (rebates and incentives), and assume that the local government has a fixed budget to allocate for weatherizing buildings. The objective is to maximize energy savings - or equivalently, reduce emissions - subject to the constraint that the total cost cannot be larger than the budget. For this, we need recommendations of which buildings to target.\n\nLinear programming is a well-established mathematical tool used for policy purposes, starting from optimizing military logistics during WW2 to optimizing the energy source mixture (see appendix). This problem formulation fits well with a linear programming framework. Specifically, this is an example of a Mixed-Integer Programming (MIP) problem, as the solution must be an integer (we can't weatherize 3.6 buildings).\n\nRead in geocoded building data (Madisonville, KY)¶\n\n```{python}\n# # # Load data blocpower\n# # zipdf = pd.read_csv(\"Merged_CJEST.csv\")\n\n# # mic = pd.read_csv(\"Microsoft_Building_zip.csv\")\n# # ########################################################################\n\n# # mic['zcta'] = mic['zcta'].astype(str)\n\n# # zipdf['zipcode'] = zipdf['zipcode'].astype(str)\n# # zipdf = zipdf.merge(mic, how='left', left_on='zipcode', right_on='zcta')\n\n# # # Load the shapefile of zipcodes from the US Census Bureau website\n# # tiger_shp_url = 'https://www2.census.gov/geo/tiger/TIGER2022/ZCTA520/tl_2022_us_zcta520.zip'\n# # zip_shp = gpd.read_file(tiger_shp_url)\n# # # no state column in 2022 file\n\n\n# # # Rename the ZIP code column to \"zip\" and select the \"zip\" and \"geometry\" columns\n# # zip_shp = zip_shp.rename(columns={\"GEOID\": \"zip_code\",\n# #                                   \"geometry\": \"zip_geom\"})\n# # # zip_shp = zip_shp[['zip_name', 'zip_fips', 'geometry']]\n\n# # zip_shp['zcta_shp'] = zip_shp.ZCTA5CE20.astype(str)\n# # zipdf['zcta_bp'] = zipdf.zipcode.astype(str)\n\n\n# # zip_shp = zip_shp.merge(zipdf, how='left', left_on='zcta_shp', right_on='zcta_bp')\n\n# # zip_shp = zip_shp[~(zip_shp.state_code.isin(['AK', 'HI']))]\n\n# # #zip_shp = gpd.GeoDataFrame(zip_shp, geometry='zip_geom', crs='epsg:4326')\n\n# # zip_shp.to_csv(r'C:\\Users\\HK\\Downloads\\Final_Report\\Final_Report\\cejst_bp_zip_shp.csv')\n\n\n# zipdf = pd.read_csv('cejst_bp_zip_shp.csv')\n\n# zipdf['zip_geom'] = zipdf['zip_geom'].apply(wkt.loads)\n# zipdf = gpd.GeoDataFrame(zipdf, geometry = zipdf['zip_geom'], crs='epsg:4326')\n# zipdf = zipdf.round(2)\n\n\n# # Load the shapefile of counties from the US Census Bureau \n# state_url = 'https://www2.census.gov/geo/tiger/TIGER2022/STATE/tl_2022_us_state.zip'\n# st_shp = gpd.read_file(state_url)\n# statedf = pd.read_csv('state_shp.csv')\n# st_shp = st_shp.merge(statedf, left_on='STUSPS', right_on='num_state', how='inner')\n```\n\n## Interactive plotly map in Quarto\n\nhttps://quarto.org/docs/interactive/widgets/jupyter.html\n\n# 1.  Introduction\n\n\n## 1.1 Current Policy Context \n\nhttps://www.bloomberg.com/news/articles/2023-05-11/biden-adopts-new-green-building-energy-standards-for-housing\n\n## 1.2 Related literature and data\n\nOver the past year, the Environmental Impact Data Collaborative has partnered with BlocPower - a Brooklyn-based climate technology company that uses building-level energy use data to guide community decarbonization projects. A key element of this partnership has been EIDC’s role in helping make BlocPower’s data available to researchers in the  environmental justice space.\n\nBlocPower uploaded 3,309 data points for more than 121 million buildings to EIDC. This data is stored in Amazon Web Services and was transferred to Redivis using the built-in RestAPI. Additionally, this process occurred in two phases: first, BlocPower uploaded data for 39 states in January 2023, and second, they uploaded data for the additional 11 states and Washington D.C. in April 2023. This was ingested on MDI EIDC’s Google Cloud storage.\n\n[Sources]\n\nThe source of this data is tax assessment records, which provide real data on building system types and attributes (like built year and area). This data then serves as inputs to an Automatic Building Energy Modeling (AutoBEM) developed by Oak Ridge National Laboratory\n\n\nRECS\n\n## 1.3 Data Availability - Kentucky\n\n```{python}\n\n# Specify the path to your zip file and the extraction directory\nzip_path = \"data/geocoded_kentucky_zip_buildings.zip\"\n\n# Specify the csv file name if known; otherwise, you can list contents and choose\ncsv_file_name = \"geocoded_kentucky_zip_buildings.csv\"\n\n# Use zipfile to extract\nwith zipfile.ZipFile(zip_path, 'r') as zip_ref:\n    # If you know the name of the csv file you can extract it directly\n    zip_ref.extract(csv_file_name)\n\ndf = pd.read_csv(r\"geocoded_kentucky_zip_buildings.csv\")  # Reference any table in this project\n\n# df.to_parquet(r'D:\\Work\\Georgetown\\acad\\mdi\\final_portfolio\\blocpower-building-energy\\ky_buildings.parquet')\n```\n\n```{python}\n\ntest = df[['geocoded', 'building_id' , 'building_type' , 'heating_fuel_type', 'total_site_energy_GJ',\n            \"address\", \"area_sq_ft\", \"energy_use_intensity\"]]\n\ntest = test[test['heating_fuel_type'] != 'Unknown']\ntest = test.dropna(subset=['heating_fuel_type'])\n#test = test.sample(frac=0.8).reset_index()\ntest['geocoded'] = test['geocoded'].str.replace('(','').str.replace(')','') # Remove parentheses\ntest[['lat', 'lon']] = test['geocoded'].str.split(',', expand=True)\ntest['lat'] = test['lat'].astype(float)\ntest['lon'] = test['lon'].astype(float)\n\n# Convert latitude and longitude to a point\ntest['geometry'] = test.apply(lambda row: Point(row.lon, row.lat), axis=1)\n```\n\n# Model 1: Basic\n## Model Formulation\n\n- **Google Doc**: [Google Doc Link](https://docs.google.com/document/d/1JikyyMgS6zkjCQZMJQrtv8sU_ut1Uf0n8xkclPbHVg8/edit)\n- **Paper**: [ScienceDirect Paper Link](https://www.sciencedirect.com/science/article/pii/S0306261922010510)\n\n### Sets and Indices\n- $i \\in T$: Index and set of potential buildings to weatherize.\n\n### Parameters\n- $c_i \\in \\mathbb{R}_+$: The cost of weatherizing building $i$.\n- $e_i \\in \\mathbb{R}_+$: The energy use of building $i$.\n\n### Decision Variables\n- $w_i \\in [0,1]$: This variable is equal to 1 if building $i$ is weatherized; and 0 otherwise.\n\n### Objective Function\n- **Energy savings**: We seek to maximize the total energy savings from all buildings.\n  - Maximize \n  $Z = \\sum_{i \\in T} e_i \\cdot w_i$` $(1)$\n\n### Constraints\n- **Budget**: We need to ensure that the total cost of interventions does not exceed the allocated budget.\n  - $\\sum_{i \\in T} c_i \\cdot w_i \\leq \\text{budget}$ $(2)$\n  - Budget = USD 3,000,000\n\n### Parameters\n- **Costs**: The complication is that the cost $c_i$ and energy savings $e_i$ is different for each building, based on the chosen intervention and the building's own characteristics. Installing a heat pump or weatherizing in a gas-heating building of 6,000 sq. ft. would have a different cost from installing the same equipment in an oil-heating building of 3,000 sq. ft. Depending on local labor and material costs, even the exact same project on comparable buildings would have different costs in Wichita and Ithaca.\n\n#### Industry experts have the following input:\n\n- Engie: 'Because of the wide variations, a heuristic approach is probably the best you can do.'\n- BlocPower: 'The cost estimation is a process which requires local data, personnel hours and itself has an expense associated with it'\n\n### Energy savings:\n- The original paper by Heleno et al (2022) seems to use a heuristic approach, by calculating cost and savings factors from the Weatherization Assistance Program (WAP) for different types of building archetypes. [ScienceDirect Paper Link](https://www.sciencedirect.com/science/article/pii/S0306261922010510)\n\nFor this current example, we assume the following factors. So, weatherizing a gas-heated building reduces energy use by 4% and costs 2000 USD.\n\n#### Energy savings factors:\n- Gas Buildings = 0.96\n- Oil Buildings = 0.98\n\n#### Cost:\n- Gas buildings = 2000\n- Oil Buildings = 3000\n\nMultiply the above factors with the cost and energy columns to obtain 2 new columns per building, `$e_i$` (energy savings after weatherization) and `$c_i$` (cost of weatherization).\n\n\nhttps://www.sciencedirect.com/science/article/pii/S0306261922010510\n\nEnergy savings achieved: 61656.41 GJ\nCost of intervention: USD 3000000\nBuildings weatherized: 1442\nVisualize recommendations on map\n\n```{python}\n\n# gdf = gdf.round(2)\n# # merge to optimized dataframe\n# gdf = gdf.merge(test, left_on='building_id', right_on='building_id', how='inner')\n\n# Convert the DataFrame to a GeoDataFrame\ngdf = gpd.GeoDataFrame(test, geometry='geometry', crs='epsg:4326')\n\n# create retrofit column\n# gdf['Retrofit?'] = gdf['opt'].apply(lambda x: 'YES' if x == 1 else 'NO')\n\n#round energy savings column\n# gdf['energy_savings'] = gdf['energy_savings'].round(3)\n\nm1 = gdf.explore(\"energy_use_intensity\", #tooltip=False, #categorical=True, \n                 tooltip=[\"address\", \"area_sq_ft\", \"energy_use_intensity\",\n                        \"building_type\", \"heating_fuel_type\"])\n\n # Set `preferCanvas` to optimize performance of map\nm1.options[\"preferCanvas\"] = True\n\n#set a tile layer - OSM\nfolium.TileLayer(\"OpenStreetMap\").add_to(m1)\nm1\n```\n\n```{python}\nm1.save\n```\n\n## H3\n\n```{python}\nfrom h3 import h3\n\n\ndef update_map(h3_level=10):\n    def lat_lng_to_h3(row):\n        return h3.geo_to_h3(row.geometry.y, row.geometry.x, h3_level)\n\n    gdf['h3'] = gdf.apply(lat_lng_to_h3, axis=1)\n\n    counts = gdf[gdf['energy_use_intensity'] > np.median(gdf['energy_use_intensity'])].groupby('h3').size().reset_index(name='count')\n    \n    def add_geometry(row):\n        points = h3.h3_to_geo_boundary(row['h3'], True)\n        return Polygon(points)\n\n    counts['geometry'] = counts.apply(add_geometry, axis=1)\n    ky_hex = gpd.GeoDataFrame(counts, geometry='geometry', crs='EPSG:4326')\n\n    m = folium.Map(location=[37.3, -87.56], zoom_start=12)\n\n    colormap = linear.YlOrRd_09.scale(ky_hex['count'].min(), ky_hex['count'].max())\n\n    folium.GeoJson(\n        ky_hex,\n        name='geojson',\n        style_function=lambda feature: {\n            'fillColor': colormap(feature['properties']['count']),\n            'color': 'black',\n            'weight': .8,\n            'fillOpacity': 0.7,\n        },\n        tooltip=folium.GeoJsonTooltip(fields=['count'])\n    ).add_to(m)\n\n    colormap.add_to(m)\n\n    return m\n\nupdate_map(h3_level=9)\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"embed-resources":true,"number-sections":true,"highlight-style":"github","output-file":"Optimization_Kentucky_retrofit.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","theme":"cosmo","title":"BlocPower Report","author":[{"name":"EIDC","affiliations":[{"name":"Georgetown University"}]}],"date":"`r Sys.Date()`","jupyter":"python3","code-copy":true,"page-layout":"full"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}